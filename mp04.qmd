<div style="text-align: center;">
# Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans
</div>

# Introduction


Newly hired at CUNY, I have thirty days to choose between one of two retirement plans. These two plans can be viewed [here](https://www.cuny.edu/wp-content/uploads/sites/4/page-assets/about/administration/offices/hr/benefits/Benefits-Guide-Retirement-Plans-Final-HEO-and-ECP.pdf). This is an early choice for faculty and is important as it is essentially permanent and cannot be changed. In this project, I will use historical financial data and a bootstrap inference strategy to estimate the probability that one plan is better than the other. 

The two plans are better explained below: 

## Teachers Retirement System (TRS)

The TRS plan is a traditional pension plan: after retirement, the employer continues to pay employees a fraction of their salary until death. This type of plan is called a “defined-benefit” because the retirement pay is fixed a priori and the employer takes the market risk. If the market under performs expectations, CUNY has to make up the gap; if the market over performs expectations, CUNY pockets the excess balance.

Employees pay a fixed percentage of their paycheck into the pension fund. The contribution rates are based on employee's salary amount, and are as follows: 

- $45,000 or less: 3%
- $45,001 to $55,000: 3.5%
- $55,001 to $75,000: 4.5%
- $75,001 to $100,000: 5.75%
- $100,001 or more: 6%

Then, the retirement benefit is calculated based on the *Final three years salary* of the employee, which changed after 2024. Before 2024, it was based on the prior five years. 

If **N** is the number of years served, the annual retirement benefit is: 

- 1.67% * FAS * N, if N is less than 20 years
- 1.75% * FAS * N, if N is equal to 20 years
- (35% + 2% * N) * FAS, if N is greater than 20 years

In each case, the benefit is paid out equally over 12 months. 

The benefit is increased annually by 50% of the CPI, rounded up to the nearest tenth of a percent. For example, a CPI of 2.9% gives an inflation adjustment of 1.5%. The benefit is capped below at 1% and above at 3%, so a CPI of 10% leads to a 3% inflation adjustment while a CPI of 0% leads to a 1% inflation adjustment.

The inflation adjustment is effective each September and the CPI used is the aggregate monthly CPI of the previous 12 months; so the September 2024 adjustment depends on the CPI from September 2023 to August 2024.


## Optional Retirement Plan (ORP)

The ORP plan is more similar to a 401(k) plan offered by a private employer. The employee and the employer both make contributions to a retirement account which is then invested in the employee’s choice of mutual funds. Those investments grow “tax-free” until the employee begins to withdraw them upon retirement. If the employee does not use up the funds, they are passed down to that employee’s spouse, children, or other heirs; if the employee uses the funds too quickly and zeros out the account balance, no additional retirement funds are available. This type of plan is called a defined-contribution plan as only the contributions to the retirement account are fixed by contract: the final balance depends on market factors outside of the employee’s control.


When retired, an employee has access to the funds and can withdraw at any rate they wish. Usually, withdrawing 4% of the value per year is the best practice, but funds in the plan will continue to experience market returns. 

The funds available in an ORP account depend strongly on the investments chosen. For this project, we will assume that participants invest in a Fidelity Freedom Fund with the following asset allocation: 

- Age 25 to Age 49:
     - 54% US Equities
     - 36% International Equities
     - 10% Bonds
     
- Age 50 to Age 59:
     - 47% US Equities
     - 32% International Equities
     - 21% Bonds
- Age 60 to Age 74:
     - 34% US Equities
     - 23% International Equities
     - 43% Bonds
- Age 75 or older: 
     - 19% US Equities
     - 13% International Equities
     - 62% Bonds
     - 6% Short-Term Debt

Both the employee and the employer make monthly contributions to the employee’s ORP account. These returns are calculated as a percentage of the employee’s annual salary, which is the same rate as the TRS:

- $45,000 or less: 3%
- $45,001 to $55,000: 3.5%
- $55,001 to $75,000: 4.5%
- $75,001 to $100,000: 5.75%
- $100,001 or more: 6%

The employer contribution is fixed at:
- 8% for the first seven years of employment at CUNY
- 10% for all years after 


# Data Acquisition  

For this project, we will use data from two economic and financial data services. They are as follows: 

- [AlphaVantage](https://www.alphavantage.co/): a commercial stock market data provider
- [FRED](https://fred.stlouisfed.org/): the Federal Reserve Economic Data repository maintained by the Federal Reserve Bank of St. Louis

To begin my Monte Carlo analysis, I will need historical data covering the following. For ease, linked the data I plan to use to each point. 

- [Wage Growth](https://fred.stlouisfed.org/series/SMU36935610500000003)
- [Inflation](https://fred.stlouisfed.org/series/CUURA101SA0)
- [US Equity Market Total Returns](https://www.alphavantage.co/documentation/)
- [International Equity Market total returns](https://www.alphavantage.co/documentation/)
- [Bond Market Total Returns](https://fred.stlouisfed.org/series/BAMLHYH0A3CMTRIV)
- [Short-term debt returns](https://fred.stlouisfed.org/series/DTB3) 


<details>
  <summary>**Click here to see how to set up the pathway**</summary>
```{r}

library(httr2)
library(jsonlite)
library(tidyverse)
library(gt)
library(dplyr)
library(gtExtras)
library(tidyr)
library(ggplot2)
library(stringr)
library(DT)

alpha_vantage_key <- "657RUGIZTAGDBDOF"
fred_key <- "2220adc19cf9dd1075bb3d55cadc8031"


get_alpha_data <- function(symbol, interval = "TIME_SERIES_DAILY", api_key) {
  url <- paste0("https://www.alphavantage.co/query?function=", interval,
                "&symbol=", symbol, "&apikey=", api_key, "&outputsize=full&datatype=json")
  

  response <- request(url) |> req_perform()
  if (response |> resp_status() != 200) {
    stop("Failed to retrieve Alpha Vantage data. HTTP Status: ", response |> resp_status())
  }
  
  data <- fromJSON(response |> resp_body_string())
  timeseries <- data[["Time Series (Daily)"]]
  if (is.null(timeseries)) stop("Failed to retrieve Alpha Vantage data for symbol: ", symbol)
  
  df <- as.data.frame(do.call(rbind, timeseries))
  df$date <- rownames(df)
  rownames(df) <- NULL
  
  
  df <- df |>
    rename(close = `4. close`) |>
    mutate(
      date = as.Date(date),
      close = as.numeric(close)
    ) |>
    arrange(date)
  
  df <- df |>
    mutate(month = format(date, "%Y-%m")) |>
    group_by(month) |>
    summarize(
      monthly_return = last(close) / first(close) - 1,
      .groups = 'drop'
    ) |>
    mutate(date = as.Date(paste0(month, "-01"))) |>
    select(date, monthly_return)
  
  return(df)
}

get_fred_data <- function(series_id, api_key) {
  url <- paste0("https://api.stlouisfed.org/fred/series/observations?series_id=", 
                series_id, "&api_key=", api_key, "&file_type=json")
  

  response <- request(url) |> req_perform()
  if (response |> resp_status() != 200) {
    stop("Failed to retrieve FRED data. HTTP Status: ", response |> resp_status())
  }
  
 
  data <- fromJSON(response |> resp_body_string())
  if (is.null(data$observations)) stop("No observations found for series: ", series_id)
  

  df <- as.data.frame(data$observations) |>
    mutate(
      date = as.Date(date),
      value = suppressWarnings(as.numeric(value))
    ) |>
    filter(!is.na(value)) |>
    select(date, value)
  
  return(df)
}
```
</details>



<details>
  <summary>**Click here to see how the data was downloaded into R**</summary>
```{r}
# Wage Growth 

wage_growth <- get_fred_data("SMU36935610500000003", fred_key) |>
  mutate(month = format(date, "%Y-%m")) |>
  group_by(month) |>
  summarize(wage_growth = last(value), .groups = 'drop') |>
  mutate(date = as.Date(paste0(month, "-01"))) |>
  select(date, wage_growth) |>
  mutate(salary = wage_growth * 40 * 52)


# Inflation  
inflation <- get_fred_data("CUURA101SA0", fred_key) |>
  mutate(month = format(date, "%Y-%m"))|>
  group_by(month) |>
  summarize(inflation = last(value), .groups = 'drop') |>
  mutate(date = as.Date(paste0(month, "-01")))|>
  select(date, inflation)

# U.S. Market Total Returns 
us_equity_data <- get_alpha_data("SPY", "TIME_SERIES_DAILY", alpha_vantage_key) |>
  rename(us_equity_return = monthly_return)


# International Stock Market Total Returns
international_equity_data <- get_alpha_data("EFA", "TIME_SERIES_DAILY", alpha_vantage_key) |>
  rename(international_equity_return = monthly_return)


# 5. Bond Market Total Returns
bond_market_return <- get_fred_data("BAMLHYH0A3CMTRIV", fred_key) |>
  mutate(month = format(date, "%Y-%m")) |>
  group_by(month) |>
  summarize(bond_return = last(value), .groups = 'drop') |>
  mutate(date = as.Date(paste0(month, "-01"))) |>
  select(date, bond_return)

# Short-Term Debt Returns
short_debt_data <- get_fred_data("DTB3", fred_key) |>
  mutate(month = format(date, "%Y-%m")) |>
  group_by(month) |>
  summarize(short_term_debt_rate = last(value), .groups = 'drop') |>
  mutate(date = as.Date(paste0(month, "-01"))) |>
  select(date, short_term_debt_rate)

# Merge All Data
data <- list(
  wage_growth,
  inflation,
  us_equity_data,
  international_equity_data,
  bond_market_return,
  short_debt_data
) |>
  reduce(full_join, by = "date") |>
  arrange(date) |>
  drop_na()  

```
</details>

```{r}
datatable(data)
```

# Initial Analysis 

First, I want to see the difference between certain aspects of our data. Firstly, I want to see the difference between the growth in hourly wage rate and inflation. This can help me anticipate how much the value of money will continue to be in the future compared to the price of goods. 

<details>
  <summary>**Click here to see how to make the line graph**</summary>
```{r}

wage_vs_inflation <- list(
  wage_growth,
  inflation
) |>
  reduce(full_join, by = "date") |>
  arrange(date) |>
  drop_na() |>
  select(-salary)

Overtime <- ggplot(wage_vs_inflation, aes (x = date)) +
  geom_line(aes(y = wage_growth, color = "Wage Growth Rate")) + 
  geom_line(aes(y = inflation, color = "Inflation Growth Rate")) + 
  scale_color_manual(values = c("Wage Growth Rate" = "chartreuse4", "Inflation Growth Rate" = "firebrick2")) +
  labs(title = "The Growth Rate Between Wage Rate and Inflation Rate Overtime, 2007-2024", x = "Date", y = "Rate") +
  theme_minimal()
```
</details>


```{r}

print(Overtime)

```

Below shows the difference between the United States Stockl Market Total Returns and the International Stock Market Total Returns. 
<details>
  <summary>**Click here to see how to make the line graph**</summary>
```{r}
US_vs_international <- list(
  us_equity_data,
  international_equity_data
) |>
  reduce(full_join, by = "date") |>
  arrange(date) |>
  drop_na() 

Overtime2 <- ggplot(US_vs_international, aes (x = date)) +
  geom_line(aes(y = us_equity_return, color = "US Stock Market Total Returns"), linewidth = 1) + 
  geom_line(aes(y = international_equity_return, color = "International Stock Market Total Returns"), linewidth = 1) + 
  scale_color_manual(values = c("US Stock Market Total Returns" = "darkseagreen", "International Stock Market Total Returns" = "darkorchid")) +
  labs(title = "US Stock Market Total Returns vs International Stock Market Total Returns, 2007-2024", x = "Date", y = "Monthly Return") +
  theme_minimal()

```
</details>

```{r}

print(Overtime2)

```

The following graph shows the relationship between the Bond Market Total Returns and Short-Term Debt Returns. 

<details>
 <summary>**Click here to see how to make the line graph**</summary>
```{r}

Bondreturn_vs_shortdebt <- list(
  bond_market_return,
  short_debt_data
) |>
  reduce(full_join, by = "date") |>
  arrange(date) |>
  drop_na() 


Overtime3 <- ggplot(Bondreturn_vs_shortdebt, aes (x = date)) +
  geom_line(aes(y = bond_return, color = "Bond Market Total Return"), linewidth = 1) + 
  geom_line(aes(y = short_term_debt_rate, color = "Short-Term Debt Returns"), linewidth = 1) + 
  scale_color_manual(values = c("Bond Market Total Return" = "darkseagreen", "Short-Term Debt Returns" = "darkorchid")) +
  labs(title = "Bond Market Total Return vs Short-Term Debt Returns, 2007-2024", x = "Date", y = "Monthly Returns") +
  theme_minimal()

```
</details>

```{r}

print(Overtime3)

```


# Historical Comparison 

To conduct this comparison, we must make some assumptions. Firstly, we will assume that we joined CUNY in the first month of the historical data, January 1, 2007, and retired in the final month of the data, October 1, 2024. Since the average salary in New York in 2007 was $58,094.40, we will assume a starting salary of $60,000. 

```{r}
January_salary <- wage_growth[format(wage_growth$date, "%m") == "01", ] |>
  mutate(difference = salary - lag(salary))
datatable(January_salary)

```

Here we can see the salary increase each January 1st from 2007 to 2024. To stay about average with the wage increase, I will assume that I get a raise every 5 years. The first raise will be $5,000, the second will be $7,000, and the final one will be $12,000. This will create the following salaries, per year: 

- 2007 - 2011: $60,000
- 2012 - 2016: $65,000
- 2017 - 2021: $72,000
- 2022 - 2024: $84,000

Though these raises seem random, they are selected to put us near the New York salary average by 5-year increments. 

Now, let's see how much money we put into the pension plan over our time as an employee. 

```{r}

years1_to_5 <- (.045 * 60000) * 5
years6_to_10 <- (.045 * 65000) * 5
years11_15 <- (.045 * 72000) * 5 
years15_to_17 <- (.0575 * 84000) * 3

total_paid <- (years1_to_5 + years6_to_10 + years11_15 + years15_to_17)

print(total_paid)

```

Thus, over our career, we would have paid $58,815 worth of pension to the state. Now, let's see which option of retirement would be better for us to take. 

### TRS: 

Since 2007 to 2024 is only 17 years, we fall under the first bracket with the following equation: 1.75% * FAS * N, if N is equal to 20 years. 

Since we made $84,000 for our final three years, 2022, 2023, and 2024, our final average salary would be $84,000. 
```{r}

month_one_TRS <- (.0167 * 84000 * 17) / 12 

print(month_one_TRS)

```

Thus, our first month of retirement with this plan will leave us with $1,987.30. 


### ORP 

```{r}

overall_ORP <- ((60000 * .045 + 60000 * .08) * 7) + (((60000 * .045 + 60000 * .10) * 10))

month_one_orp <- (overall_ORP * .04)/12

print(month_one_orp)

```


# Long-Term Average Analysis

We will assume that we pass away at 90 years old and that we retired at 65. That is 25 years of retirement. 

### TRS: 


```{r}

total_pay_out <- (.0167 * 84000 * 17) * 25

print(total_pay_out)

```

Thus, the total life-time pay out will be $596,190. 



# Monte Carlo Analysis






# Data-Driven Decision Recommendation 












