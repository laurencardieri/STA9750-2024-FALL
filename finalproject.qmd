# Final Project Team 9

<details>
  <summary>**Click here to see how the libraries were downloaded**</summary>
```{r}


install.packages('plyr', repos = "http://cran.us.r-project.org")

options(repos = list(CRAN="http://cran.rstudio.com/"))

library(tidycensus)
library(tidyverse)
library(dplyr)
library(stringr)
library(DT)
library(tigris)
library(ggplot2)
library(sf)
library(plotly)
library(gganimate)
library(viridis)


census_api_key('fd444ca335bf9020633084575dbe45c1529be65f', install = TRUE, overwrite = TRUE)

```
</details>

Change of Variables 
<details>
  <summary>**Click here to see how the variables were changed**</summary>
```{r}

vars_2018 <- load_variables(2018, "acs1", cache = TRUE)

var_map <- c(
  "B02001_001" = "Estimated Total",
  "B02001_002" = "White Alone", 
  "B02001_003" = "Black or African American Alone", 
  "B02001_004" = "American Indian and Alaska Native Alone",
  "B02001_005" = "Asian Alone", 
  "B02001_006" = "Native Hawaiian and other Pacific Islander Alone",
  "B02001_007" = "Some Other Race", 
  "B02001_008" = "2 or more races"
)

```
</details>

Population Report for 2018 - 2023, based on Race

<details>
  <summary>**Click here to see how the data was downloaded into R**</summary>
```{r}
# Getting 2018: 

population_1901_2018 <- get_acs(
  geography = "county",
  variables = c("B02001_001", "B02001_002", "B02001_003", "B02001_004", "B02001_005", "B02001_006", "B02001_007", "B02001_008"),
  year = 2018,
  survey = "acs1"
)

population_1901_2018 <- population_1901_2018 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2018 = estimate) |>
  select(-moe)


population_1901_2018 <- population_1901_2018 |>
  mutate(race = var_map[race])

# Getting 2019

population_1901_2019 <- get_acs(
  geography = "county",
  variables = c("B02001_001", "B02001_002", "B02001_003", "B02001_004", "B02001_005", "B02001_006", "B02001_007", "B02001_008"),
  year = 2019,
  survey = "acs1"
)

population_1901_2019 <- population_1901_2019 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2019 = estimate) |>
  select(-moe)


population_1901_2019 <- population_1901_2019 |>
  mutate(race = var_map[race])


# Getting 2021

population_1901_2021 <- get_acs(
  geography = "county",
  variables = c("B02001_001", "B02001_002", "B02001_003", "B02001_004", "B02001_005", "B02001_006", "B02001_007", "B02001_008"),
  year = 2021,
  survey = "acs1"
)

population_1901_2021 <- population_1901_2021 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2021 = estimate) |>
  select(-moe)


population_1901_2021 <- population_1901_2021 |>
  mutate(race = var_map[race])


# Getting 2022


population_1901_2022 <- get_acs(
  geography = "county",
  variables = c("B02001_001", "B02001_002", "B02001_003", "B02001_004", "B02001_005", "B02001_006", "B02001_007", "B02001_008"),
  year = 2022,
  survey = "acs1"
)

population_1901_2022 <- population_1901_2022 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2022 = estimate) |>
  select(-moe)


population_1901_2022 <- population_1901_2022 |>
  mutate(race = var_map[race])


# Getting 2023

population_1901_2023 <- get_acs(
  geography = "county",
  variables = c("B02001_001", "B02001_002", "B02001_003", "B02001_004", "B02001_005", "B02001_006", "B02001_007", "B02001_008"),
  year = 2023,
  survey = "acs1"
)

population_1901_2023 <- population_1901_2023 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2023 = estimate) |>
  select(-moe)


population_1901_2023 <- population_1901_2023 |>
  mutate(race = var_map[race]) 

```
</details>


Data table that shows all of the races from 2018-2023, by race and county. 

<details>
  <summary>**Click here to see how this was done**</summary>
```{r}

total_population_race <- population_1901_2018 |>
  left_join(select(population_1901_2019, y2019, GEOID, race), by = c("GEOID", "race")) |>
  left_join(select(population_1901_2021, y2021, GEOID, race), by = c("GEOID", "race")) |>
  left_join(select(population_1901_2022, y2022, GEOID, race), by = c("GEOID", "race")) |>
  left_join(select(population_1901_2023, y2023, GEOID, race), by = c("GEOID", "race")) 
            
```
</details>


```{r}

datatable(total_population_race)

```


Get NY State map by county 

<details>
  <summary>**Click here to see how this was done**</summary>
```{r}

ny_counties <- counties(state = "NY", cb = TRUE)

ny_counties_sf <- st_as_sf(ny_counties)

```
</details>


```{r}

ggplot(data = ny_counties_sf) +
  geom_sf() +
  theme_minimal() +
  labs(title = "Counties of New York State",
       caption = "Source: US Census Bureau")

```




<details>
  <summary>**Click here to see how this was done**</summary>
```{r}

# Only total population 

estimated_total <- total_population_race |>
  filter(grepl("Estimated Total", race))

            
estimated_total_long <- estimated_total |>
  pivot_longer(cols = starts_with("y"),
               names_to = "year",
               values_to = "population") |>
  mutate(year = as.numeric(gsub("y", "", year))) |>
  select(-race, -NAME)


NY_pop_long <- ny_counties_sf |>
  left_join(estimated_total_long, by = "GEOID")
            

library(gganimate)
library(gifski)
library(magick)

p <- ggplot(NY_pop_long) +
  geom_sf(aes(fill = population), color = "white") +  
  scale_fill_viridis(name = "population", option = "C", trans = "log") + 
  theme_minimal() +
  labs(title = "Population by County in New York ({frame_time})",  # Add the title and year
       subtitle = "Year: {frame_time}",
       caption = "Source: Your Dataset") +
  theme(legend.position = "right") +
  transition_time(year) +  
  ease_aes('linear') 



```
</details>

```{r}

```


Data by House Hold Income: 


Population Report for 2018 - 2023, based on Race

<details>
  <summary>**Click here to see how the data was downloaded into R**</summary>
```{r}
var_map2 <- c(
  "S1901_C01_001" = "Total Households",
  "S1901_C01_002" = "Income < $10,000", 
  "S1901_C01_003" = "Income $10,000 - $14,999", 
  "S1901_C01_004" = "Income $15,000 - $24,999",
  "S1901_C01_005" = "Income $25,000 - $34,999", 
  "S1901_C01_006" = "Income $35,000 - $49,999",
  "S1901_C01_007" = "Income $50,000 - $74,999", 
  "S1901_C01_008" = "Income $75,000 - $99,999",
  "S1901_C01_009" = "Income $100,000 - $149,999",
  "S1901_C01_010" = "Income $150,000 - $199,999",
  "S1901_C01_011" = "Income > $200,000"
)

# Income 2018
Income_2018 <- get_acs(
  geography = "county",
  variables = c("S1901_C01_001E", "S1901_C01_002E", "S1901_C01_003E", "S1901_C01_004E", "S1901_C01_005E", "S1901_C01_006E", "S1901_C01_007E", "S1901_C01_008E", "S1901_C01_009E", "S1901_C01_010E", "S1901_C01_011E"),
  year = 2018,
  survey = "acs1"
)

Income_2018 <- Income_2018 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(income = variable) |>
  rename(y2018 = estimate) |>
  select(-moe)


Income_2018 <- Income_2018 |>
  mutate(income = var_map2[income])

# Income 2019

Income_2019 <- get_acs(
  geography = "county",
  variables = c("S1901_C01_001E", "S1901_C01_002E", "S1901_C01_003E", "S1901_C01_004E", "S1901_C01_005E", "S1901_C01_006E", "S1901_C01_007E", "S1901_C01_008E", "S1901_C01_009E", "S1901_C01_010E", "S1901_C01_011E"),
  year = 2019,
  survey = "acs1"
)

Income_2019 <- Income_2019 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(income = variable) |>
  rename(y2019 = estimate) |>
  select(-moe)


Income_2019 <- Income_2019 |>
  mutate(income = var_map2[income])

# Get 2021

Income_2021 <- get_acs(
  geography = "county",
  variables = c("S1901_C01_001E", "S1901_C01_002E", "S1901_C01_003E", "S1901_C01_004E", "S1901_C01_005E", "S1901_C01_006E", "S1901_C01_007E", "S1901_C01_008E", "S1901_C01_009E", "S1901_C01_010E", "S1901_C01_011E"),
  year = 2021,
  survey = "acs1"
)

Income_2021 <- Income_2021 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(income = variable) |>
  rename(y2021 = estimate) |>
  select(-moe)


Income_2021 <- Income_2021 |>
  mutate(income = var_map2[income])


# Get 2022

Income_2022 <- get_acs(
  geography = "county",
  variables = c("S1901_C01_001E", "S1901_C01_002E", "S1901_C01_003E", "S1901_C01_004E", "S1901_C01_005E", "S1901_C01_006E", "S1901_C01_007E", "S1901_C01_008E", "S1901_C01_009E", "S1901_C01_010E", "S1901_C01_011E"),
  year = 2022,
  survey = "acs1"
)

Income_2022 <- Income_2022 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(income = variable) |>
  rename(y2022 = estimate) |>
  select(-moe)


Income_2022 <- Income_2022 |>
  mutate(income = var_map2[income])

# Get 2023

Income_2023 <- get_acs(
  geography = "county",
  variables = c("S1901_C01_001E", "S1901_C01_002E", "S1901_C01_003E", "S1901_C01_004E", "S1901_C01_005E", "S1901_C01_006E", "S1901_C01_007E", "S1901_C01_008E", "S1901_C01_009E", "S1901_C01_010E", "S1901_C01_011E"),
  year = 2023,
  survey = "acs1"
)

Income_2023 <- Income_2023 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(income = variable) |>
  rename(y2023 = estimate) |>
  select(-moe)


Income_2023 <- Income_2023 |>
  mutate(income = var_map2[income])


```
</details>


Data table that shows all of the households from 2018-2023, by income and county. 

<details>
  <summary>**Click here to see how this was done**</summary>
```{r}

# Join tables

total_income_household <- Income_2018 |>
  left_join(select(Income_2019, y2019, GEOID, income), by = c("GEOID", "income")) |>
  left_join(select(Income_2021, y2021, GEOID, income), by = c("GEOID", "income")) |>
  left_join(select(Income_2022, y2022, GEOID, income), by = c("GEOID", "income")) |>
  left_join(select(Income_2023, y2023, GEOID, income), by = c("GEOID", "income")) 

            
```
</details>


```{r}

datatable(total_income_household)

```


long version: 

```{r}

total_income_household_long <- total_income_household |>
  pivot_longer(cols = starts_with("y"),
               names_to = "year",
               values_to = "households") |>
  mutate(year = as.numeric(gsub("y", "", year))) 


datatable(total_income_household_long)

```



Mean Income per capita per race by county: 




<details>
  <summary>**Click here to see how the data was downloaded into R**</summary>
```{r}


# Mean Incomes per capita 

var_map3 <- c(
  "S1902_C03_001" = "All Household Income Mean",
  "S1902_C03_020" = "White Alone", 
  "S1902_C03_021" = "Black or African American Alone", 
  "S1902_C03_022" = "American Indian and Alaska Native Alone",
  "S1902_C03_023" = "Asian Alone", 
  "S1902_C03_024" = "Native Hawaiian and other Pacific Islander Alone",
  "S1902_C03_025" = "Some Other Race", 
  "S1902_C03_026" = "2 or more races"
)

# Get 2018

mean_income_2018 <- get_acs(
  geography = "county",
  variables = c("S1902_C03_001E", "S1902_C03_020E", "S1902_C03_021E", "S1902_C03_022E", "S1902_C03_023E", "S1902_C03_024E", "S1902_C03_025E", "S1902_C03_026E"),
  year = 2018,
  survey = "acs1"
)

mean_income_2018 <- mean_income_2018 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2018 = estimate) |>
  select(-moe)


mean_income_2018 <- mean_income_2018 |>
  mutate(race = var_map3[race])


  


# Get 2019

mean_income_2019 <- get_acs(
  geography = "county",
  variables = c("S1902_C03_001E", "S1902_C03_020E", "S1902_C03_021E", "S1902_C03_022E", "S1902_C03_023E", "S1902_C03_024E", "S1902_C03_025E", "S1902_C03_026E"),
  year = 2019,
  survey = "acs1"
)

mean_income_2019 <- mean_income_2019 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2019 = estimate) |>
  select(-moe)


mean_income_2019 <- mean_income_2019 |>
  mutate(race = var_map3[race])



# Get 2021

mean_income_2021 <- get_acs(
  geography = "county",
  variables = c("S1902_C03_001E", "S1902_C03_020E", "S1902_C03_021E", "S1902_C03_022E", "S1902_C03_023E", "S1902_C03_024E", "S1902_C03_025E", "S1902_C03_026E"),
  year = 2021,
  survey = "acs1"
)

mean_income_2021 <- mean_income_2021 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2021 = estimate) |>
  select(-moe)


mean_income_2021 <- mean_income_2021 |>
  mutate(race = var_map3[race])


# Get 2022

mean_income_2022 <- get_acs(
  geography = "county",
  variables = c("S1902_C03_001E", "S1902_C03_020E", "S1902_C03_021E", "S1902_C03_022E", "S1902_C03_023E", "S1902_C03_024E", "S1902_C03_025E", "S1902_C03_026E"),
  year = 2022,
  survey = "acs1"
)

mean_income_2022 <- mean_income_2022 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2022 = estimate) |>
  select(-moe)


mean_income_2022 <- mean_income_2022 |>
  mutate(race = var_map3[race])



# Get 2023

mean_income_2023 <- get_acs(
  geography = "county",
  variables = c("S1902_C03_001E", "S1902_C03_020E", "S1902_C03_021E", "S1902_C03_022E", "S1902_C03_023E", "S1902_C03_024E", "S1902_C03_025E", "S1902_C03_026E"),
  year = 2023,
  survey = "acs1"
)

mean_income_2023 <- mean_income_2023 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(race = variable) |>
  rename(y2023 = estimate) |>
  select(-moe)


mean_income_2023 <- mean_income_2023 |>
  mutate(race = var_map3[race])


```
</details>


Data table that shows all of the households from 2018-2023, by income and county. 

<details>
  <summary>**Click here to see how this was done**</summary>
```{r}

# Join tables

total_mean_incomes <- mean_income_2018 |>
  left_join(select(mean_income_2019, y2019, GEOID, race), by = c("GEOID", "race")) |>
  left_join(select(mean_income_2021, y2021, GEOID, race), by = c("GEOID", "race")) |>
  left_join(select(mean_income_2022, y2022, GEOID, race), by = c("GEOID", "race")) |>
  left_join(select(mean_income_2023, y2023, GEOID, race), by = c("GEOID", "race")) 


```
</details>


```{r}

datatable(total_mean_incomes)

```


long version: 

```{r}

total_mean_incomes_long <- total_mean_incomes |>
  pivot_longer(cols = starts_with("y"),
               names_to = "year",
               values_to = "mean_income") |>
  mutate(year = as.numeric(gsub("y", "", year))) 
            

```


```{r}

datatable(total_mean_incomes_long)

```







Occupation type by county (population)




<details>
  <summary>**Click here to see how the data was downloaded into R**</summary>
```{r}
var_map4 <- c(
  "S2402_C01_001" = "Total Employed Full-Time",
  "S2402_C01_002" = "Management, Business, Science, Arts", 
  "S2402_C01_018" = "Service",
  "S2402_C01_026" = "Sales and Office", 
  "S2402_C01_029" = "Natural Resources, Construction, Maintenance",
  "S2402_C01_033" = "Production, Transportation, Material Moving"
)

# Occupation 2018


main_occupation_2018 <- get_acs(
  geography = "county",
  variables = c("S2402_C01_001", "S2402_C01_002", "S2402_C01_018", "S2402_C01_026", "S2402_C01_029", "S2402_C01_033"),
  year = 2018,
  survey = "acs1"
)

main_occupation_2018 <- main_occupation_2018 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(job_type = variable) |>
  rename(y2018 = estimate) |>
  select(-moe)


main_occupation_2018 <- main_occupation_2018 |>
  mutate(job_type = var_map4[job_type])


# Occupation 2019


main_occupation_2019 <- get_acs(
  geography = "county",
  variables = c("S2402_C01_001", "S2402_C01_002", "S2402_C01_018", "S2402_C01_026", "S2402_C01_029", "S2402_C01_033"),
  year = 2019,
  survey = "acs1"
)

main_occupation_2019 <- main_occupation_2019 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(job_type = variable) |>
  rename(y2019 = estimate) |>
  select(-moe)


main_occupation_2019 <- main_occupation_2019 |>
  mutate(job_type = var_map4[job_type])


# Occupation 2021


main_occupation_2021 <- get_acs(
  geography = "county",
  variables = c("S2402_C01_001", "S2402_C01_002", "S2402_C01_018", "S2402_C01_026", "S2402_C01_029", "S2402_C01_033"),
  year = 2021,
  survey = "acs1"
)

main_occupation_2021 <- main_occupation_2021 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(job_type = variable) |>
  rename(y2021 = estimate) |>
  select(-moe)


main_occupation_2021 <- main_occupation_2021 |>
  mutate(job_type = var_map4[job_type])

# Occupation 2022


main_occupation_2022 <- get_acs(
  geography = "county",
  variables = c("S2402_C01_001", "S2402_C01_002", "S2402_C01_018", "S2402_C01_026", "S2402_C01_029", "S2402_C01_033"),
  year = 2022,
  survey = "acs1"
)

main_occupation_2022 <- main_occupation_2022 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(job_type = variable) |>
  rename(y2022 = estimate) |>
  select(-moe)


main_occupation_2022 <- main_occupation_2022 |>
  mutate(job_type = var_map4[job_type])


# Occupation 2023


main_occupation_2023 <- get_acs(
  geography = "county",
  variables = c("S2402_C01_001", "S2402_C01_002", "S2402_C01_018", "S2402_C01_026", "S2402_C01_029", "S2402_C01_033"),
  year = 2023,
  survey = "acs1"
)

main_occupation_2023 <- main_occupation_2023 |>
  filter(str_detect(NAME, regex("New York", ignore_case = TRUE))) |>
  rename(job_type = variable) |>
  rename(y2023 = estimate) |>
  select(-moe)


main_occupation_2023 <- main_occupation_2023 |>
  mutate(job_type = var_map4[job_type])



```
</details>


Data table that shows all the job types population throughout the years 

<details>
  <summary>**Click here to see how this was done**</summary>
```{r}

# Join tables

total_occupations <- main_occupation_2018 |>
  left_join(select(main_occupation_2019, y2019, GEOID, job_type), by = c("GEOID", "job_type")) |>
  left_join(select(main_occupation_2021, y2021, GEOID, job_type), by = c("GEOID", "job_type")) |>
  left_join(select(main_occupation_2022, y2022, GEOID, job_type), by = c("GEOID", "job_type")) |>
  left_join(select(main_occupation_2023, y2023, GEOID, job_type), by = c("GEOID", "job_type")) 

```
</details>


```{r}

datatable(total_occupations)

```


long version: 

```{r}

total_occupations_long <- total_occupations |>
  pivot_longer(cols = starts_with("y"),
               names_to = "year",
               values_to = "population") |>
  mutate(year = as.numeric(gsub("y", "", year))) 

            

```


```{r}

datatable(total_occupations_long)

```





























